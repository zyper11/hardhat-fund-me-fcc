{
    "address": "0x012aC7B5e247897E64E53602b23d933E1f720A15",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "priceFeedAddress",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe__NotEnoughETH",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "FundMe__NotOwner",
            "type": "error"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [],
            "name": "MINIMUM_USD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "funder",
                    "type": "address"
                }
            ],
            "name": "getAddressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getFunder",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0xd563639a0c07085ede160bfd4937c2db863663b454275a2a71bf038e219e0229",
    "receipt": {
        "to": null,
        "from": "0x55EC93bD4226196a67126E3bA6079d690Af8F426",
        "contractAddress": "0x012aC7B5e247897E64E53602b23d933E1f720A15",
        "transactionIndex": 51,
        "gasUsed": "823274",
        "logsBloom": "0x
        "blockHash": "0x4dd8e0762a16cb34e0dc07292fc66fe0461b00d56cf441d0003f072bd9ac4210",
        "transactionHash": "0xd563639a0c07085ede160bfd4937c2db863663b454275a2a71bf038e219e0229",
        "logs": [],
        "blockNumber": 8098743,
        "cumulativeGasUsed": "7966623",
        "status": 1,
        "byzantium": true
    },
    "args": ["0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"],
    "numDeployments": 2,
    "solcInputHash": "89b14e614116db3b6beb6a771c3aca05",
    "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotEnoughETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Jayvee Anacan\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Fundme.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/Fundme.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\nerror FundMe__NotEnoughETH();\\n\\n/** @title A contract for crowd funding\\n *  @author Jayvee Anacan\\n *  @notice This contract is to demo sample funding contract\\n *  @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address private immutable i_owner;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner, \\\"Sender is not owner\\\");\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     *  @notice This function funds this contract\\n     *  @dev This implements price feeds as our library\\n     */\\n    function fund() public payable {\\n        // 18 decimals\\n        if (msg.value.getConversionRate(s_priceFeed) < MINIMUM_USD) {\\n            revert FundMe__NotEnoughETH();\\n        }\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x9300764545d66d25f4dcbf3746efbb0c35cf0f24f2d60556b1c0dc9becaaed85\",\"license\":\"UNLICENSED\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        // ABI\\n        (,int256 answer,,,) = priceFeed.latestRoundData();\\n        // ETH in terms of USD\\n        // 3000.00000000\\n\\n        return uint256(answer * 1e10); // 1**10 == 10000000000\\n    }\\n\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n\\n}\",\"keccak256\":\"0xa470d092e2fc86141b57454d40e0d6e44a6799a51444eabbeaeb86b2027f27fc\",\"license\":\"UNLICENSED\"}},\"version\":1}",
    "bytecode": "0x60a060405234801561001057600080fd5b50604051610ee0380380610ee083398181016040528101906100329190610110565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061013d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100dd826100b2565b9050919050565b6100ed816100d2565b81146100f857600080fd5b50565b60008151905061010a816100e4565b92915050565b600060208284031215610126576101256100ad565b5b6000610134848285016100fb565b91505092915050565b608051610d8161015f6000396000818161031401526105c70152610d816000f3fe6080604052600436106100745760003560e01c8063893d20e81161004e578063893d20e81461010c5780639e87a5cd14610137578063b60d428814610162578063d7b4750c1461016c57610083565b80630343fb251461008d5780633ccfd60b146100ca5780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100b460048036038101906100af9190610833565b6102c9565b6040516100c19190610879565b60405180910390f35b3480156100d657600080fd5b506100df610312565b005b3480156100ed57600080fd5b506100f66105b6565b6040516101039190610879565b60405180910390f35b34801561011857600080fd5b506101216105c3565b60405161012e91906108a3565b60405180910390f35b34801561014357600080fd5b5061014c6105eb565b604051610159919061091d565b60405180910390f35b61016a6101a9565b005b34801561017857600080fd5b50610193600480360381019061018e9190610964565b610615565b6040516101a091906108a3565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461065c90919063ffffffff16565b1015610220576040517fb514e4ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610397576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561041a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116103d0575b5050505050905060005b81518110156104a557600082828151811061044257610441610991565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061049d906109ef565b915050610424565b50600067ffffffffffffffff8111156104c1576104c0610a37565b5b6040519080825280602002602001820160405280156104ef5781602001602082028036833780820191505090505b5060009080519060200190610505929190610729565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161052c90610a97565b60006040518083038185875af1925050503d8060008114610569576040519150601f19603f3d011682016040523d82523d6000602084013e61056e565b606091505b50509050806105b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a990610b09565b60405180910390fd5b5050565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080828154811061062a57610629610991565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061066883610698565b90506000670de0b6b3a764000085836106819190610b29565b61068b9190610b9a565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156106e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070a9190610c58565b5050509150506402540be400816107219190610cd3565b915050919050565b8280548282559060005260206000209081019282156107a2579160200282015b828111156107a15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610749565b5b5090506107af91906107b3565b5090565b5b808211156107cc5760008160009055506001016107b4565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610800826107d5565b9050919050565b610810816107f5565b811461081b57600080fd5b50565b60008135905061082d81610807565b92915050565b600060208284031215610849576108486107d0565b5b60006108578482850161081e565b91505092915050565b6000819050919050565b61087381610860565b82525050565b600060208201905061088e600083018461086a565b92915050565b61089d816107f5565b82525050565b60006020820190506108b86000830184610894565b92915050565b6000819050919050565b60006108e36108de6108d9846107d5565b6108be565b6107d5565b9050919050565b60006108f5826108c8565b9050919050565b6000610907826108ea565b9050919050565b610917816108fc565b82525050565b6000602082019050610932600083018461090e565b92915050565b61094181610860565b811461094c57600080fd5b50565b60008135905061095e81610938565b92915050565b60006020828403121561097a576109796107d0565b5b60006109888482850161094f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109fa82610860565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a2c57610a2b6109c0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a81600083610a66565b9150610a8c82610a71565b600082019050919050565b6000610aa282610a74565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610af3600b83610aac565b9150610afe82610abd565b602082019050919050565b60006020820190508181036000830152610b2281610ae6565b9050919050565b6000610b3482610860565b9150610b3f83610860565b9250828202610b4d81610860565b91508282048414831517610b6457610b636109c0565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ba582610860565b9150610bb083610860565b925082610bc057610bbf610b6b565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bea81610bcb565b8114610bf557600080fd5b50565b600081519050610c0781610be1565b92915050565b6000819050919050565b610c2081610c0d565b8114610c2b57600080fd5b50565b600081519050610c3d81610c17565b92915050565b600081519050610c5281610938565b92915050565b600080600080600060a08688031215610c7457610c736107d0565b5b6000610c8288828901610bf8565b9550506020610c9388828901610c2e565b9450506040610ca488828901610c43565b9350506060610cb588828901610c43565b9250506080610cc688828901610bf8565b9150509295509295909350565b6000610cde82610c0d565b9150610ce983610c0d565b9250828202610cf781610c0d565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610d2f57610d2e6109c0565b5b8282058414831517610d4457610d436109c0565b5b509291505056fea264697066735822122094ec6c641f02e72eecb937a68b3680a71ac2e8c3f25afe32a8f3d826dd99e9e864736f6c63430008110033",
    "deployedBytecode": "0x6080604052600436106100745760003560e01c8063893d20e81161004e578063893d20e81461010c5780639e87a5cd14610137578063b60d428814610162578063d7b4750c1461016c57610083565b80630343fb251461008d5780633ccfd60b146100ca5780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100b460048036038101906100af9190610833565b6102c9565b6040516100c19190610879565b60405180910390f35b3480156100d657600080fd5b506100df610312565b005b3480156100ed57600080fd5b506100f66105b6565b6040516101039190610879565b60405180910390f35b34801561011857600080fd5b506101216105c3565b60405161012e91906108a3565b60405180910390f35b34801561014357600080fd5b5061014c6105eb565b604051610159919061091d565b60405180910390f35b61016a6101a9565b005b34801561017857600080fd5b50610193600480360381019061018e9190610964565b610615565b6040516101a091906108a3565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461065c90919063ffffffff16565b1015610220576040517fb514e4ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610397576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561041a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116103d0575b5050505050905060005b81518110156104a557600082828151811061044257610441610991565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061049d906109ef565b915050610424565b50600067ffffffffffffffff8111156104c1576104c0610a37565b5b6040519080825280602002602001820160405280156104ef5781602001602082028036833780820191505090505b5060009080519060200190610505929190610729565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161052c90610a97565b60006040518083038185875af1925050503d8060008114610569576040519150601f19603f3d011682016040523d82523d6000602084013e61056e565b606091505b50509050806105b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a990610b09565b60405180910390fd5b5050565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080828154811061062a57610629610991565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061066883610698565b90506000670de0b6b3a764000085836106819190610b29565b61068b9190610b9a565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156106e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070a9190610c58565b5050509150506402540be400816107219190610cd3565b915050919050565b8280548282559060005260206000209081019282156107a2579160200282015b828111156107a15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610749565b5b5090506107af91906107b3565b5090565b5b808211156107cc5760008160009055506001016107b4565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610800826107d5565b9050919050565b610810816107f5565b811461081b57600080fd5b50565b60008135905061082d81610807565b92915050565b600060208284031215610849576108486107d0565b5b60006108578482850161081e565b91505092915050565b6000819050919050565b61087381610860565b82525050565b600060208201905061088e600083018461086a565b92915050565b61089d816107f5565b82525050565b60006020820190506108b86000830184610894565b92915050565b6000819050919050565b60006108e36108de6108d9846107d5565b6108be565b6107d5565b9050919050565b60006108f5826108c8565b9050919050565b6000610907826108ea565b9050919050565b610917816108fc565b82525050565b6000602082019050610932600083018461090e565b92915050565b61094181610860565b811461094c57600080fd5b50565b60008135905061095e81610938565b92915050565b60006020828403121561097a576109796107d0565b5b60006109888482850161094f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109fa82610860565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a2c57610a2b6109c0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a81600083610a66565b9150610a8c82610a71565b600082019050919050565b6000610aa282610a74565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610af3600b83610aac565b9150610afe82610abd565b602082019050919050565b60006020820190508181036000830152610b2281610ae6565b9050919050565b6000610b3482610860565b9150610b3f83610860565b9250828202610b4d81610860565b91508282048414831517610b6457610b636109c0565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ba582610860565b9150610bb083610860565b925082610bc057610bbf610b6b565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bea81610bcb565b8114610bf557600080fd5b50565b600081519050610c0781610be1565b92915050565b6000819050919050565b610c2081610c0d565b8114610c2b57600080fd5b50565b600081519050610c3d81610c17565b92915050565b600081519050610c5281610938565b92915050565b600080600080600060a08688031215610c7457610c736107d0565b5b6000610c8288828901610bf8565b9550506020610c9388828901610c2e565b9450506040610ca488828901610c43565b9350506060610cb588828901610c43565b9250506080610cc688828901610bf8565b9150509295509295909350565b6000610cde82610c0d565b9150610ce983610c0d565b9250828202610cf781610c0d565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610d2f57610d2e6109c0565b5b8282058414831517610d4457610d436109c0565b5b509291505056fea264697066735822122094ec6c641f02e72eecb937a68b3680a71ac2e8c3f25afe32a8f3d826dd99e9e864736f6c63430008110033",
    "devdoc": {
        "author": "Jayvee Anacan",
        "details": "This implements price feeds as our library",
        "kind": "dev",
        "methods": {
            "fund()": {
                "details": "This implements price feeds as our library"
            }
        },
        "title": "A contract for crowd funding",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "fund()": {
                "notice": "This function funds this contract"
            }
        },
        "notice": "This contract is to demo sample funding contract",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 64,
                "contract": "contracts/Fundme.sol:FundMe",
                "label": "s_funders",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 68,
                "contract": "contracts/Fundme.sol:FundMe",
                "label": "s_addressToAmountFunded",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 73,
                "contract": "contracts/Fundme.sol:FundMe",
                "label": "s_priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
